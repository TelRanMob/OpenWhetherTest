{
	"id": "67c0e80a-700e-e508-66a8-f0c9689c6874",
	"name": "WeatherMapElena",
	"description": "",
	"order": [
		"5c361ff0-a419-df27-62b5-c1f37dfbb5fe",
		"9e6d2936-dbfc-226c-abb6-f015f643333b",
		"2bb9c47b-9ae1-5720-fa5c-aab26ef30492",
		"e24bbc71-47fd-bef2-b497-890578a241b7"
	],
	"folders": [],
	"timestamp": 1457024650733,
	"owner": "303910",
	"remoteLink": "",
	"public": false,
	"requests": [
		{
			"id": "2bb9c47b-9ae1-5720-fa5c-aab26ef30492",
			"headers": "",
			"url": "{{URL}}/data/2.5/weather?lat={{lat}}&lon={{lon}}&{{Key_ippid}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Response time is less than 500ms\"] = responseTime < 500;\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\ntests[\"X-Cache-Key\"] = postman.getResponseHeader(\"X-Cache-Key\");\ntests[\"Weather parameter is present in response\"] = responseBody.has(\"weather\");\n\ntests[\"Body has coordinates\"] = responseBody.has(\"coord\");//проверка наличия в тексте названия параметров\ntests[\"Coord matches string\"] = responseBody.has(\"coord\");\ntests[\"Weather matches string\"] = responseBody.has(\"weather\");\ntests[\"Base matches string\"] = responseBody.has(\"base\");\ntests[\"Main matches string\"] = responseBody.has(\"main\");\ntests[\"Wind matches string\"] = responseBody.has(\"wind\");\ntests[\"Clouds matches string\"] = responseBody.has(\"clouds\");\ntests[\"DT matches string\"] = responseBody.has(\"dt\");\ntests[\"ID matches string\"] = responseBody.has(\"id\");\ntests[\"Name matches string\"] = responseBody.has(\"name\");\ntests[\"Cod matches string\"] = responseBody.has(\"cod\");\n\nvar jsonData = JSON.parse(responseBody);//ответ сервеа сохранен в переменную\n\nvar city_name = environment.city;//создаем внутреннию переменную равную перем. окрежения\ntests[\"City name is correct\"] = jsonData.name === city_name;//сравниваем перем.с именем в responseBody\n\ntests[\"coord propertie is correct\"] =  jsonData.hasOwnProperty('coord');////проверка наличия  параметров\ntests[\"name propertie is correct\"] =  jsonData.hasOwnProperty('name');\ntests[\"id propertie is correct\"] = jsonData.hasOwnProperty('id');\n\ntests[\"lon propertie is correct\"] = jsonData.coord.hasOwnProperty('lon');\ntests[\"lat propertie is correct\"] = jsonData.coord.hasOwnProperty('lat');\n\n\ntests[\"id propertie is correct\"]=jsonData.weather[0].hasOwnProperty('id');\ntests[\"main propertie is correct\"]=jsonData.weather[0].hasOwnProperty('main');\ntests[\"description propertie is correct\"]=jsonData.weather[0].hasOwnProperty('description');\ntests[\"icon propertie is correct\"]=jsonData.weather[0].hasOwnProperty('icon'); \n\nvar main = jsonData.main;\ntests[\"Main.temp propertie is correct\"] = main.hasOwnProperty('temp');\ntests[\"Main.pressure propertie is correct\"] = main.hasOwnProperty('pressure');\ntests[\"Main.humidity propertie is correct\"] = main.hasOwnProperty('humidity');\ntests[\"Main.temp_min propertie is correct\"] = main.hasOwnProperty('temp_min');\ntests[\"Main.temp_max propertie is correct\"] = main.hasOwnProperty('temp_max');\ntests[\"Main.sea_level propertie is correct\"] = main.hasOwnProperty('sea_level');\ntests[\"Main.grnd_level propertie is correct\"] = main.hasOwnProperty('grnd_level');\n                                \n\nvar wind = jsonData.wind;\ntests[\"Wind.speed propertie  is correct\"] = wind.hasOwnProperty('speed');\ntests[\"Wind.deg propertie  is correct\"] = wind.hasOwnProperty('deg');\n\ntests[\"Clouds.all propertie  is correct\"] = jsonData.clouds.hasOwnProperty('all');\n\nvar sys = jsonData.sys;\ntests[\"Sys.message propertie is correct\"] = sys.hasOwnProperty('message');\ntests[\"Sys.country propertie is correct\"] = sys.hasOwnProperty('country');\ntests[\"Sys.sunrise propertie is correct\"] = sys.hasOwnProperty('sunrise');\ntests[\"Sys.sunset propertie is correct\"] = sys.hasOwnProperty('sunset');\n\n\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1457357663536,
			"name": "OpenWeather(by coord)",
			"description": "",
			"collectionId": "67c0e80a-700e-e508-66a8-f0c9689c6874",
			"responses": []
		},
		{
			"id": "5c361ff0-a419-df27-62b5-c1f37dfbb5fe",
			"headers": "",
			"url": "http://api.openweathermap.org/data/2.5/weather?q={{city}}&{{Key_ippid}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\ntests[\"Response time is less than 500ms\"] = responseTime < 500;\ntests[\"X-Cache-Key\"] = postman.getResponseHeader(\"X-Cache-Key\");\ntests[\"Content-Type is JSON\"] = postman.getResponseHeader(\"Content-Type\");\n\ntests[\"Body has coordinates\"] = responseBody.has(\"coord\");//проверка наличия в тексте названия параметров\ntests[\"Coord matches string\"] = responseBody.has(\"coord\");\ntests[\"Weather matches string\"] = responseBody.has(\"weather\");\ntests[\"Base matches string\"] = responseBody.has(\"base\");\ntests[\"Main matches string\"] = responseBody.has(\"main\");\ntests[\"Wind matches string\"] = responseBody.has(\"wind\");\ntests[\"Clouds matches string\"] = responseBody.has(\"clouds\");\ntests[\"DT matches string\"] = responseBody.has(\"dt\");\ntests[\"ID matches string\"] = responseBody.has(\"id\");\ntests[\"Name matches string\"] = responseBody.has(\"name\");\ntests[\"Cod matches string\"] = responseBody.has(\"cod\");\n\n\nvar jsonData = JSON.parse(responseBody);//ответ сервеа сохранен в переменную\n\nvar city_name = environment.city;\ntests[\"City name is correct\"] = jsonData.name === city_name;\n\ntests[\"coord propertie is correct\"] =  jsonData.hasOwnProperty('coord');////проверка наличия  параметров\ntests[\"name propertie is correct\"] =  jsonData.hasOwnProperty('name');\ntests[\"id propertie is correct\"] = jsonData.hasOwnProperty('id');\n                                    \n//var coord = jsonData.coord;\n//tests[\"Coord.lon props is correct\"] = coord.hasOwnProperty('lon') \n//tests[\"Coord.lat props is correct\"] =coord.hasOwnProperty('lat');\ntests[\"lon propertie is correct\"] = jsonData.coord.hasOwnProperty('lon');\ntests[\"lat propertie is correct\"] = jsonData.coord.hasOwnProperty('lat');\n\n\ntests[\"id propertie is correct\"]=jsonData.weather[0].hasOwnProperty('id');\ntests[\"main propertie is correct\"]=jsonData.weather[0].hasOwnProperty('main');\ntests[\"description propertie is correct\"]=jsonData.weather[0].hasOwnProperty('description');\ntests[\"icon propertie is correct\"]=jsonData.weather[0].hasOwnProperty('icon'); \n\nvar main = jsonData.main;\ntests[\"Main.temp propertie is correct\"] = main.hasOwnProperty('temp');\ntests[\"Main.pressure propertie is correct\"] = main.hasOwnProperty('pressure');\ntests[\"Main.humidity propertie is correct\"] = main.hasOwnProperty('humidity');\ntests[\"Main.temp_min propertie is correct\"] = main.hasOwnProperty('temp_min');\ntests[\"Main.temp_max propertie is correct\"] = main.hasOwnProperty('temp_max');\ntests[\"Main.sea_level propertie is correct\"] = main.hasOwnProperty('sea_level');\ntests[\"Main.grnd_level propertie is correct\"] = main.hasOwnProperty('grnd_level');\n                                \n\nvar wind = jsonData.wind;\ntests[\"Wind.speed propertie  is correct\"] = wind.hasOwnProperty('speed');\ntests[\"Wind.deg propertie  is correct\"] = wind.hasOwnProperty('deg');\n\ntests[\"Clouds.all propertie  is correct\"] = jsonData.clouds.hasOwnProperty('all');\n\nvar sys = jsonData.sys;\ntests[\"Sys.message propertie is correct\"] = sys.hasOwnProperty('message');\ntests[\"Sys.country propertie is correct\"] = sys.hasOwnProperty('country');\ntests[\"Sys.sunrise propertie is correct\"] = sys.hasOwnProperty('sunrise');\ntests[\"Sys.sunset propertie is correct\"] = sys.hasOwnProperty('sunset');\n\n\nvar lon_data = jsonData.coord.lon;\nvar lat_data = jsonData.coord.lat;\nvar cityId_data = jsonData.id;\n\n\npostman.setEnvironmentVariable(\"lon\", lon_data);\npostman.setEnvironmentVariable(\"lat\", lat_data);\npostman.setEnvironmentVariable(\"cityId\", cityId_data);\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1457372124346,
			"name": "OpenWeather(by name)",
			"description": "",
			"collectionId": "67c0e80a-700e-e508-66a8-f0c9689c6874",
			"responses": []
		},
		{
			"id": "9e6d2936-dbfc-226c-abb6-f015f643333b",
			"headers": "",
			"url": "api.openweathermap.org/data/2.5/weather?q={{city}},{{countryCod }}&{{Key_ippid}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Response time is less than 500ms\"] = responseTime < 500;\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\ntests[\"X-Cache-Key\"] = postman.getResponseHeader(\"X-Cache-Key\");\ntests[\"Weather parameter is present in response\"] = responseBody.has(\"weather\");\n\ntests[\"Body has coordinates\"] = responseBody.has(\"coord\");//проверка наличия в тексте названия параметров\ntests[\"Coord matches string\"] = responseBody.has(\"coord\");\ntests[\"Weather matches string\"] = responseBody.has(\"weather\");\ntests[\"Base matches string\"] = responseBody.has(\"base\");\ntests[\"Main matches string\"] = responseBody.has(\"main\");\ntests[\"Wind matches string\"] = responseBody.has(\"wind\");\ntests[\"Clouds matches string\"] = responseBody.has(\"clouds\");\ntests[\"DT matches string\"] = responseBody.has(\"dt\");\ntests[\"ID matches string\"] = responseBody.has(\"id\");\ntests[\"Name matches string\"] = responseBody.has(\"name\");\ntests[\"Cod matches string\"] = responseBody.has(\"cod\");\n\nvar jsonData = JSON.parse(responseBody);//ответ сервеа сохранен в переменную\n\nvar city_name = environment.city;//создаем внутреннию переменную равную перем. окрежения\ntests[\"City name is correct\"] = jsonData.name === city_name;//сравниваем перем.с именем в responseBody\n\ntests[\"coord propertie is correct\"] =  jsonData.hasOwnProperty('coord');////проверка наличия  параметров\ntests[\"name propertie is correct\"] =  jsonData.hasOwnProperty('name');\ntests[\"id propertie is correct\"] = jsonData.hasOwnProperty('id');\n\ntests[\"lon propertie is correct\"] = jsonData.coord.hasOwnProperty('lon');\ntests[\"lat propertie is correct\"] = jsonData.coord.hasOwnProperty('lat');\n\n\ntests[\"id propertie is correct\"]=jsonData.weather[0].hasOwnProperty('id');\ntests[\"main propertie is correct\"]=jsonData.weather[0].hasOwnProperty('main');\ntests[\"description propertie is correct\"]=jsonData.weather[0].hasOwnProperty('description');\ntests[\"icon propertie is correct\"]=jsonData.weather[0].hasOwnProperty('icon'); \n\nvar main = jsonData.main;\ntests[\"Main.temp propertie is correct\"] = main.hasOwnProperty('temp');\ntests[\"Main.pressure propertie is correct\"] = main.hasOwnProperty('pressure');\ntests[\"Main.humidity propertie is correct\"] = main.hasOwnProperty('humidity');\ntests[\"Main.temp_min propertie is correct\"] = main.hasOwnProperty('temp_min');\ntests[\"Main.temp_max propertie is correct\"] = main.hasOwnProperty('temp_max');\ntests[\"Main.sea_level propertie is correct\"] = main.hasOwnProperty('sea_level');\ntests[\"Main.grnd_level propertie is correct\"] = main.hasOwnProperty('grnd_level');\n                                \n\nvar wind = jsonData.wind;\ntests[\"Wind.speed propertie  is correct\"] = wind.hasOwnProperty('speed');\ntests[\"Wind.deg propertie  is correct\"] = wind.hasOwnProperty('deg');\n\ntests[\"Clouds.all propertie  is correct\"] = jsonData.clouds.hasOwnProperty('all');\n\nvar sys = jsonData.sys;\ntests[\"Sys.message propertie is correct\"] = sys.hasOwnProperty('message');\ntests[\"Sys.country propertie is correct\"] = sys.hasOwnProperty('country');\ntests[\"Sys.sunrise propertie is correct\"] = sys.hasOwnProperty('sunrise');\ntests[\"Sys.sunset propertie is correct\"] = sys.hasOwnProperty('sunset');\n\n\n\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1457371726899,
			"name": "OpenWeather(by city name,country cod)",
			"description": "",
			"collectionId": "67c0e80a-700e-e508-66a8-f0c9689c6874",
			"responses": []
		},
		{
			"id": "e24bbc71-47fd-bef2-b497-890578a241b7",
			"headers": "",
			"url": "{{URL}}/data/2.5/weather?id={{cityId}}&{{Key_ippid}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Response time is less than 500ms\"] = responseTime < 500;\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\ntests[\"X-Cache-Key\"] = postman.getResponseHeader(\"X-Cache-Key\");\ntests[\"Weather parameter is present in response\"] = responseBody.has(\"weather\");\n\ntests[\"Body has coordinates\"] = responseBody.has(\"coord\");//проверка наличия в тексте названия параметров\ntests[\"Coord matches string\"] = responseBody.has(\"coord\");\ntests[\"Weather matches string\"] = responseBody.has(\"weather\");\ntests[\"Base matches string\"] = responseBody.has(\"base\");\ntests[\"Main matches string\"] = responseBody.has(\"main\");\ntests[\"Wind matches string\"] = responseBody.has(\"wind\");\ntests[\"Clouds matches string\"] = responseBody.has(\"clouds\");\ntests[\"DT matches string\"] = responseBody.has(\"dt\");\ntests[\"ID matches string\"] = responseBody.has(\"id\");\ntests[\"Name matches string\"] = responseBody.has(\"name\");\ntests[\"Cod matches string\"] = responseBody.has(\"cod\");\n\nvar jsonData = JSON.parse(responseBody);//ответ сервеа сохранен в переменную\n\nvar city_name = environment.city;//создаем внутреннию переменную равную перем. окрежения\ntests[\"City name is correct\"] = jsonData.name === city_name;//сравниваем перем.с именем в responseBody\n\ntests[\"coord propertie is correct\"] =  jsonData.hasOwnProperty('coord');////проверка наличия  параметров\ntests[\"name propertie is correct\"] =  jsonData.hasOwnProperty('name');\ntests[\"id propertie is correct\"] = jsonData.hasOwnProperty('id');\n\ntests[\"lon propertie is correct\"] = jsonData.coord.hasOwnProperty('lon');\ntests[\"lat propertie is correct\"] = jsonData.coord.hasOwnProperty('lat');\n\n\ntests[\"id propertie is correct\"]=jsonData.weather[0].hasOwnProperty('id');\ntests[\"main propertie is correct\"]=jsonData.weather[0].hasOwnProperty('main');\ntests[\"description propertie is correct\"]=jsonData.weather[0].hasOwnProperty('description');\ntests[\"icon propertie is correct\"]=jsonData.weather[0].hasOwnProperty('icon'); \n\nvar main = jsonData.main;\ntests[\"Main.temp propertie is correct\"] = main.hasOwnProperty('temp');\ntests[\"Main.pressure propertie is correct\"] = main.hasOwnProperty('pressure');\ntests[\"Main.humidity propertie is correct\"] = main.hasOwnProperty('humidity');\ntests[\"Main.temp_min propertie is correct\"] = main.hasOwnProperty('temp_min');\ntests[\"Main.temp_max propertie is correct\"] = main.hasOwnProperty('temp_max');\ntests[\"Main.sea_level propertie is correct\"] = main.hasOwnProperty('sea_level');\ntests[\"Main.grnd_level propertie is correct\"] = main.hasOwnProperty('grnd_level');\n                                \n\nvar wind = jsonData.wind;\ntests[\"Wind.speed propertie  is correct\"] = wind.hasOwnProperty('speed');\ntests[\"Wind.deg propertie  is correct\"] = wind.hasOwnProperty('deg');\n\ntests[\"Clouds.all propertie  is correct\"] = jsonData.clouds.hasOwnProperty('all');\n\nvar sys = jsonData.sys;\ntests[\"Sys.message propertie is correct\"] = sys.hasOwnProperty('message');\ntests[\"Sys.country propertie is correct\"] = sys.hasOwnProperty('country');\ntests[\"Sys.sunrise propertie is correct\"] = sys.hasOwnProperty('sunrise');\ntests[\"Sys.sunset propertie is correct\"] = sys.hasOwnProperty('sunset');\n\n\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1457357656654,
			"name": "OpenWeather(by City Id)",
			"description": "",
			"collectionId": "67c0e80a-700e-e508-66a8-f0c9689c6874",
			"responses": []
		}
	]
}